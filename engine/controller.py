import pygame
from pygame.locals import *

from helper.helper import WeakBoundMethod
from util.enums import *
from engine.event import *


class KeyboardController(Listener):
    """KeyboardController takes Pygame events generated by the
    keyboard and uses them to control the model, by sending Requests
    or to control the Pygame display directly, as with the QuitEvent
    """
    def __init__(self, event_mgr):
        super(KeyboardController, self).__init__(
            event_mgr=event_mgr)
        self._event_mgr.add(TickEvent, WeakBoundMethod(self.on_tick_event))

    def on_tick_event(self, e):
        for pygame_event in pygame.event.get():
            event = None
            if pygame_event.type == QUIT or (pygame_event.type == KEYDOWN and pygame_event.key == K_ESCAPE):
                event = QuitEvent()
            elif pygame_event.type == KEYDOWN:
                if pygame_event.key == K_LEFT:
                    event = InputEvent(
                        movement_vector={LEFT: LEFT_MAGNITUDE})
                elif pygame_event.key == K_RIGHT:
                    event = InputEvent(
                        movement_vector={RIGHT: RIGHT_MAGNITUDE})
                elif pygame_event.key == K_UP:
                    event = InputEvent(
                        movement_vector={UP: UP_MAGNITUDE})
                elif pygame_event.key == K_DOWN:
                    event = InputEvent(
                        movement_vector={DOWN: DOWN_MAGNITUDE})
                elif pygame_event.key == K_SPACE:
                    event = InputEvent(firing=True)
                elif pygame_event.key == K_c:
                    event = InputEvent(auto_firing=True)

            elif pygame_event.type == KEYUP:
                if pygame_event.key == K_LEFT:
                    event = InputEvent(
                        movement_vector={LEFT: STOP})
                elif pygame_event.key == K_RIGHT:
                    event = InputEvent(
                        movement_vector={RIGHT: STOP})
                elif pygame_event.key == K_UP:
                    event = InputEvent(
                        movement_vector={UP: STOP})
                elif pygame_event.key == K_DOWN:
                    event = InputEvent(
                        movement_vector={DOWN: STOP})
                elif pygame_event.key == K_SPACE:
                    event = InputEvent(firing=False)

            if event:
                self._event_mgr.post(event)


class CPUSpinnerController(Listener):
    def __init__(self, event_mgr, fps=60):
        super(CPUSpinnerController, self).__init__(
            event_mgr=event_mgr)
        self.running = True
        self._clock = pygame.time.Clock()
        self._frames_per_second = fps

        self._event_mgr.add(QuitEvent, WeakBoundMethod(self.on_quit_event))

    def run(self):
        while self.running:
            self._event_mgr.post(
                TickEvent(
                    ms_per_frame=self._clock.tick(self._frames_per_second)))

    def on_quit_event(self, e):
        self.running = False
