from event import *
from helper.helper import WeakBoundMethod

import pygame
from pygame.locals import *

'''
# generic controller with listener
class GenericController(object):
    def __init__(self, event_mgr):
        print(self.__str__())
        self._event_mgr = event_mgr
        self._event_mgr.add_listener(self)

    def notify(self, event):
        pass


class RunController(GenericController):
    def __init__(self, event_mgr):
        super(RunController, self).__init__(event_mgr)
        self.running = True

        self._event_mgr.print_listeners()
        # self._event_mgr.add(QuitEvent, WeakBoundMethod(self.exit))
        # self.event_mgr.add(QuitEvent, self.exit)

    def exit(self, event):
        print('exit called')
        print(f'event: {event}')
        self.running = False

    def run(self):
        print('run called')
        while self.running:
            event = QuitEvent()
            # event = TickEvent()
            self._event_mgr.post(event)


class KeyboardController(GenericController):
    def __init__(self, event_mgr):
        super(KeyboardController, self).__init__(event_mgr)

        # self._event_mgr.add(EscKeyEvent, self.on_esc_key_press)
'''


class KeyboardController:
    """KeyboardController takes Pygame events generated by the
    keyboard and uses them to control the model, by sending Requests
    or to control the Pygame display directly, as with the QuitEvent
    """
    def __init__(self, event_mgr):
        self.event_mgr = event_mgr
        self.event_mgr.register_listener(self)

    def notify(self, event):
        if isinstance( event, TickEvent ):
            #Handle Input Events
            for event in pygame.event.get():
                ev = None
                if event.type == QUIT or event.type == KEYDOWN and event.key == K_ESCAPE:
                    ev = QuitEvent()
                elif event.type == KEYDOWN and event.key == K_UP:
                    pass
                elif event.type == KEYDOWN and event.key == K_DOWN:
                    pass
                elif event.type == KEYDOWN and event.key == K_LEFT:
                    pass
                elif event.type == KEYDOWN and event.key == K_RIGHT:
                    pass

                if ev:
                    self.event_mgr.post(ev)


class CPUSpinnerController(Listener):
    def __init__(self, event_mgr):
        super(CPUSpinnerController, self).__init__(event_mgr)
        self.event_mgr = event_mgr
        self.event_mgr.register_listener(self)

        self.running = True

    def run(self):
        while self.running:
            event = TickEvent()
            self.event_mgr.post(event)

    def exit(self):
        self.running = False
