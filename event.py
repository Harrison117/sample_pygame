
'''
class EventManager(object):

    def __init__(self):
        # var dict[object: list[]] self._listeners
        self._listeners = {None: [None]}

    def print_listeners(self):
        print(self._listeners)

    def add(self, event_class, listener):
        try:
            self._listeners[event_class.__name__].append(listener)
        except KeyError:
            self._listeners[event_class.__name__] = [listener]

    def remove(self, event_class, listener):
        self._listeners[event_class.__name__].remove(listener)

    def post(self, event):
        try:
            for listener in self._listeners[event.__class__.__name__]:
                # listener.notify(event)
                listener(event)

        except KeyError:
            pass


class Event:
    pass


class QuitEvent(Event):
    pass


class TickEvent(Event):
    pass


class KeyboardEvent(Event):
    def __init__(self, key_press):
        self.key_press = key_press
'''
from weakref import WeakKeyDictionary


class Event:
    """this is a superclass for any events that might be generated by an
    object and sent to the EventManager"""
    def __init__(self, name='Generic Event'):
        self.name = name

    def __call__(self, listener):
        pass


class TickEvent(Event):
    def __init__(self):
        super(TickEvent, self).__init__(
            name='CPU Tick Event')

    def __int__(self, event_name):
        return self.__class__.__name__ == event_name


class QuitEvent(Event):
    def __init__(self):
        super(QuitEvent, self).__init__(
            name='Program Quit Event')

    def __call__(self, listener):
        listener.exit()


class Listener(object):
    def __init__(self, event_mgr=None):
        if event_mgr is not None:
            event_mgr.register_listener(self)

    def notify(self, event):
        event(self)


class EventManager:
    """this object is responsible for coordinating most communication
    between the Model, View, and Controller."""

    def __init__(self):
        self.listeners = WeakKeyDictionary()
        self.eventQueue = []

    def register_listener(self, listener):
        self.listeners[listener] = 1

    def unregister_listener(self, listener):
        if listener in self.listeners:
            del self.listeners[listener]

    def post(self, event):
        if not isinstance(event, TickEvent):
            print(f'\tMessage: {event.name}')
        for listener in self.listeners:
            listener.notify(event)
