
from weakref import WeakKeyDictionary


class Event:
    """this is a superclass for any events that might be generated by an
    object and sent to the EventManager"""
    def __init__(self, *callbacks, name=None):
        if name:
            self.name = name
        if callbacks:
            self.callbacks = list(callbacks)

    def execute(self, *args, **kwargs):
        pass


class TickEvent(Event):
    def __init__(self):
        super(TickEvent, self).__init__(
            name='CPU Tick Event')


class QuitEvent(Event):
    def __init__(self, *callbacks):
        super(QuitEvent, self).__init__(
            callbacks,
            name='Program Quit Event')

    def execute(self, *args, **kwargs):
        for callback in self.callbacks:
            callback()


class Listener(object):
    def __init__(self, event_mgr=None):
        if event_mgr:
            event_mgr.register_listener(self)

    def notify(self, event):
        pass


class EventManager:
    """this object is responsible for coordinating most communication
    between the Model, View, and Controller."""

    def __init__(self):
        self.listeners = WeakKeyDictionary()
        self.eventQueue = []

    def register_listener(self, listener):
        self.listeners[listener] = 1

    def unregister_listener(self, listener):
        if listener in self.listeners:
            del self.listeners[listener]

    def post(self, event, *specific_classes):
        """
        :param Event event:
        :param Listener[] specific_classes:
        """
        if not isinstance(event, TickEvent):
            print(f'\tMessage: {event.__class__.__name__}')
        """
        If specific_class is defined, send to to-be-affected Listener classes;
        else, send to every listener registered
        """
        if specific_classes:
            for specific_class in specific_classes:
                self.listeners[specific_class].notify(event)
        else:
            for listener in self.listeners:
                listener.notify(event)
